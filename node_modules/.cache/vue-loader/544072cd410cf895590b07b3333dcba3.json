{"remainingRequest":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\src\\components\\News.vue?vue&type=template&id=293a9583&scoped=true&","dependencies":[{"path":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\src\\components\\News.vue","mtime":1622860252809},{"path":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1655712169000},{"path":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Juan Camilo Niño\\Desktop\\PORTFOLIO\\tokyo-personal-portfolio-vuejs-template-2022-05-31-03-03-14-utc\\tokyo\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}